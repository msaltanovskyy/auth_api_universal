// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Me {
  me_id       String    @id @default(uuid()) @db.Uuid
  firstname   String    @db.VarChar(100)
  lastname    String    @db.VarChar(100)
  datebirth   DateTime  @db.Date
  auth_user   AuthUser?

  @@map("me")
}

model AuthUser {
  auth_id       String         @id @default(uuid()) @db.Uuid
  email         String         @unique @db.VarChar(100)
  password_hash String
  is_active     Boolean        @default(true)
  is_verified   Boolean        @default(false)
  me_id         String         @db.Uuid @unique
  created_at    DateTime       @default(now()) @db.Timestamp(6)
  updated_at    DateTime       @default(now()) @db.Timestamp(6)
  last_online   DateTime       @default(now()) @db.Timestamp(6)
  me            Me             @relation(fields: [me_id], references: [me_id], onDelete: Cascade)
  auth_sessions AuthSession[]
  user_roles    UserRole[]

  @@index([email], map: "idx_auth_user_email")
  @@map("auth_user")
}

model AuthSession {
  session_id    String   @id @default(uuid()) @db.Uuid
  auth_id       String   @db.Uuid
  refresh_token String
  ip_address    String?  @db.VarChar(50)
  user_agent    String?
  created_at    DateTime @default(now()) @db.Timestamp(6)
  expires_at    DateTime @db.Timestamp(6)
  revoked       Boolean  @default(false)
  auth_user     AuthUser @relation(fields: [auth_id], references: [auth_id], onDelete: Cascade)

  @@map("auth_session")
}

model Role {
  role_id          String          @id @default(uuid()) @db.Uuid
  name             String          @unique @db.VarChar(50)
  created_at       DateTime        @default(now()) @db.Timestamp(6)
  updated_at       DateTime        @default(now()) @db.Timestamp(6)
  role_permissions RolePermission[]
  user_roles       UserRole[]

  @@map("role")
}

model Permission {
  permission_id    String          @id @default(uuid()) @db.Uuid
  name             String          @unique @db.VarChar(100)
  role_permissions RolePermission[]

  @@map("permission")
}

model RolePermission {
  role_id       String     @db.Uuid
  permission_id String     @db.Uuid
  role          Role       @relation(fields: [role_id], references: [role_id], onDelete: Cascade)
  permission    Permission @relation(fields: [permission_id], references: [permission_id], onDelete: Cascade)

  @@id([role_id, permission_id])
  @@map("role_permission")
}

model UserRole {
  user_role_id String   @id @default(uuid()) @db.Uuid
  role_id      String   @db.Uuid
  auth_id      String   @db.Uuid
  role         Role     @relation(fields: [role_id], references: [role_id], onDelete: Cascade)
  auth_user    AuthUser @relation(fields: [auth_id], references: [auth_id], onDelete: Cascade)

  @@index([auth_id], map: "idx_user_role_auth_id")
  @@index([role_id], map: "idx_user_role_role_id")
  @@map("user_role")
}